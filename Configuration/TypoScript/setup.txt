includeLibs.tx_hypestore_menu = EXT:hype_store/Classes/Hook/class.tx_hypestore_menu.php

config.tx_extbase {
	objects {

	}

	persistence {
		classes {

			# Category
			Tx_HypeStore_Domain_Model_Category {
				mapping {
					tableName = tx_hypestore_domain_model_category
				}
			}

			# Product
			Tx_HypeStore_Domain_Model_Product {
				mapping {
					tableName = tx_hypestore_domain_model_product
					recordType = basic
				}

				subclasses {
					AudioDisc = Tx_HypeStore_Domain_Model_Product_AudioDisc
					Apparel = Tx_HypeStore_Domain_Model_Product_Apparel
					Book = Tx_HypeStore_Domain_Model_Product_Book
					Furniture = Tx_HypeStore_Domain_Model_Product_Furniture
				}

				columns {
					attributes.foreignClass = Tx_HypeStore_Domain_Model_ProductAttribute
					scaled_prices.foreignClass = Tx_HypeStore_Domain_Model_ProductPrice
				}
			}

			# Product: Apparel
			Tx_HypeStore_Domain_Model_Product_Apparel < .Tx_HypeStore_Domain_Model_Product
			Tx_HypeStore_Domain_Model_Product_Apparel {
				mapping {
					recordType = apparel
				}

				subclasses >
			}

			# Product: AudioDisc
			Tx_HypeStore_Domain_Model_Product_AudioDisc < .Tx_HypeStore_Domain_Model_Product
			Tx_HypeStore_Domain_Model_Product_AudioDisc {
				mapping {
					recordType = audio_disc
				}

				subclasses >
			}

			# Product: Book
			Tx_HypeStore_Domain_Model_Product_Book < .Tx_HypeStore_Domain_Model_Product
			Tx_HypeStore_Domain_Model_Product_Book {
				mapping {
					recordType = book
				}

				subclasses >
			}

			# Product: Furniture
			Tx_HypeStore_Domain_Model_Product_Furniture < .Tx_HypeStore_Domain_Model_Product
			Tx_HypeStore_Domain_Model_Product_Furniture {
				mapping {
					recordType = furniture
				}

				subclasses >
			}

			# Attribute
			Tx_HypeStore_Domain_Model_Attribute {
				mapping {
					tableName = tx_hypestore_domain_model_attribute
					recordType = basic
				}

				subclasses {
					Set = Tx_HypeStore_Domain_Model_Attribute_Set
					Custom = Tx_HypeStore_Domain_Model_Attribute_Custom
				}
			}

			# Attribute: Set
			Tx_HypeStore_Domain_Model_Attribute_Set < .Tx_HypeStore_Domain_Model_Attribute
			Tx_HypeStore_Domain_Model_Attribute_Set {
				mapping {
					recordType = set
				}

				subclasses >
			}

			# Attribute: Custom
			Tx_HypeStore_Domain_Model_Attribute_Custom < .Tx_HypeStore_Domain_Model_Attribute
			Tx_HypeStore_Domain_Model_Attribute_Custom {
				mapping {
					recordType = custom
				}

				subclasses >
			}

			# Contact: Artist
			Tx_HypeStore_Domain_Model_Contact_Artist {
				mapping {
					tableName = tx_hypedirectory_domain_model_contact
				}
			}

			# Contact: Author
			Tx_HypeStore_Domain_Model_Contact_Author {
				mapping {
					tableName = tx_hypedirectory_domain_model_contact
				}
			}

			# Contact: Editor
			Tx_HypeStore_Domain_Model_Contact_Editor {
				mapping {
					tableName = tx_hypedirectory_domain_model_contact
				}
			}

			# Contact: Manufacturer
			Tx_HypeStore_Domain_Model_Contact_Manufacturer {
				mapping {
					tableName = tx_hypedirectory_domain_model_contact
				}
			}

			# Contact: Publisher
			Tx_HypeStore_Domain_Model_Contact_Publisher {
				mapping {
					tableName = tx_hypedirectory_domain_model_contact
				}
			}

			# Customer
			Tx_HypeStore_Domain_Model_Customer {
				mapping {
					tableName = fe_users

					columns {
						tx_hypestore_domain_model_addresses.mapOnProperty = addresses
						tx_hypestore_domain_model_purchases.mapOnProperty = purchases
						tx_hypestore_domain_model_cart_items.mapOnProperty = cartItems
						tx_hypestore_domain_model_watchlist_items.mapOnProperty = watchlistItems
					}
				}
			}

			# Customer Address
			Tx_HypeStore_Domain_Model_CustomerAddress {
				mapping {
					tableName = tx_hypestore_domain_model_customer_address
				}
			}

			# Product Price
			Tx_HypeStore_Domain_Model_ProductPrice {
				mapping {
					tableName = tx_hypestore_domain_model_product_price
				}
			}

			# Tax Scale
			Tx_HypeStore_Domain_Model_TaxScale {
				mapping {
					tableName = tx_hypestore_domain_model_tax_scale
				}
			}

			# Product Attribute
			Tx_HypeStore_Domain_Model_ProductAttribute {
				mapping {
					tableName = tx_hypestore_domain_model_product_attribute
				}
			}

			# Product Stock
			Tx_HypeStore_Domain_Model_ProductStock {
				mapping {
					tableName = tx_hypestore_domain_model_product_stock
				}
			}

			# Product State
			Tx_HypeStore_Domain_Model_ProductState {
				mapping {
					tableName = tx_hypestore_domain_model_product_state
				}
			}

			# Product Track
			Tx_HypeStore_Domain_Model_ProductTrack {
				mapping {
					tableName = tx_hypestore_domain_model_product_track
				}
			}

			# Depot
			Tx_HypeStore_Domain_Model_Depot {
				mapping {
					tableName = tx_hypedirectory_domain_model_contact

					columns {
						tx_hypestore_domain_model_stocks.mapOnProperty = stocks
						tx_hypestore_domain_model_states.mapOnProperty = states
					}
				}
			}

			# Discount
			Tx_HypeStore_Domain_Model_Discount {
				mapping {
					tableName = tx_hypestore_domain_model_discount
				}
			}

			# Cart Item
			Tx_HypeStore_Domain_Model_CartItem {
				mapping {
					tableName = tx_hypestore_domain_model_cart_item
				}
			}

			# Watchlist Item
			Tx_HypeStore_Domain_Model_WatchlistItem {
				mapping {
					tableName = tx_hypestore_domain_model_watchlist_item
				}
			}

			# Purchase
			Tx_HypeStore_Domain_Model_Purchase {
				mapping {
					tableName = tx_hypestore_domain_model_purchase
				}
			}

			# Purchase
			Tx_HypeStore_Domain_Model_Purchase_item {
				mapping {
					tableName = tx_hypestore_domain_model_purchase_item
				}
			}
		}
	}
}

plugin.tx_hypestore {
	settings {

		common {
			navigation {
				expAll = {$plugin.tx_hypestore.settings.common.navigation.expAll}
			}

			currency {
				code = {$plugin.tx_hypestore.settings.common.currency.code}
				sign = {$plugin.tx_hypestore.settings.common.currency.sign}
				name = {$plugin.tx_hypestore.settings.common.currency.name}
			}

			tax {
				rate = {$plugin.tx_hypestore.settings.common.tax.rate}
			}

			feature {
				cart = {$plugin.tx_hypestore.settings.common.feature.cart}
				checkout = {$plugin.tx_hypestore.settings.common.feature.checkout}
				watchlist = {$plugin.tx_hypestore.settings.common.feature.watchlist}
				stocks = {$plugin.tx_hypestore.settings.common.feature.stocks}
			}
		}

		object {
			category {

				property {
					images {
						path = {$plugin.tx_hypestore.settings.object.category.property.images.path}
					}
				}
			}

			product {

				property {
					images {
						path = {$plugin.tx_hypestore.settings.object.product.property.images.path}
					}

					files {
						path = {$plugin.tx_hypestore.settings.object.product.property.files.path}
					}

					tracks {
						path = {$plugin.tx_hypestore.settings.object.product.property.tracks.path}
					}
				}
			}
		}

		view {
			category {
				pid = {$plugin.tx_hypestore.settings.view.category.pid}

				common {
					overrideDocumentTitle = {$plugin.tx_hypestore.settings.view.category.common.overrideDocumentTitle}
					displayDescendedProducts = {$plugin.tx_hypestore.settings.view.category.common.displayDescendedProducts}
				}

				filters {
					useAllAttributes = {$plugin.tx_hypestore.settings.view.category.filters.useAllAttributes}
					attributes = {$plugin.tx_hypestore.settings.view.category.filters.attributes}
				}

				action {
					index {
						common {
							skip = {$plugin.tx_hypestore.settings.view.category.action.index.common.skip}
							showProducts = {$plugin.tx_hypestore.settings.view.category.action.index.common.showProducts}
							showSubcategories = {$plugin.tx_hypestore.settings.view.category.action.index.common.showSubcategories}
						}

						property {
							images {
								maxWidth = {$plugin.tx_hypestore.settings.view.category.action.index.property.images.maxWidth}
								maxHeight = {$plugin.tx_hypestore.settings.view.category.action.index.property.images.maxHeight}
							}
						}

						object {
							category {
								property {
									images {
										maxWidth = {$plugin.tx_hypestore.settings.view.category.action.index.object.category.property.images.maxWidth}
										maxHeight = {$plugin.tx_hypestore.settings.view.category.action.index.object.category.property.images.maxHeight}
									}
								}
							}

							product {
								property {
									images {
										maxWidth = {$plugin.tx_hypestore.settings.view.category.action.index.object.product.property.images.maxWidth}
										maxHeight = {$plugin.tx_hypestore.settings.view.category.action.index.object.product.property.images.maxHeight}
									}
								}
							}
						}
					}

					list {
						common {
							showProducts = {$plugin.tx_hypestore.settings.view.category.action.list.common.showProducts}
							showSubcategories = {$plugin.tx_hypestore.settings.view.category.action.list.common.showSubcategories}
						}

						property {
							images {
								maxWidth = {$plugin.tx_hypestore.settings.view.category.action.list.property.images.maxWidth}
								maxHeight = {$plugin.tx_hypestore.settings.view.category.action.list.property.images.maxHeight}
							}
						}

						object {
							category {
								property {
									images {
										maxWidth = {$plugin.tx_hypestore.settings.view.category.action.list.object.category.property.images.maxWidth}
										maxHeight = {$plugin.tx_hypestore.settings.view.category.action.list.object.category.property.images.maxHeight}
									}
								}
							}

							product {
								property {
									images {
										maxWidth = {$plugin.tx_hypestore.settings.view.category.action.list.object.product.property.images.maxWidth}
										maxHeight = {$plugin.tx_hypestore.settings.view.category.action.list.object.category.property.images.maxHeight}
									}
								}
							}
						}
					}
				}
			}

			product {
				pid = {$plugin.tx_hypestore.settings.view.product.pid}

				common {
					overrideDocumentTitle = {$plugin.tx_hypestore.settings.view.product.common.overrideDocumentTitle}
				}

				action {
					index {
						property {
							images {
								maxWidth = {$plugin.tx_hypestore.settings.view.product.action.index.property.images.maxWidth}
								maxHeight = {$plugin.tx_hypestore.settings.view.product.action.index.property.images.maxHeight}
							}
						}

						object {
							category {
								property {
									images {
										maxWidth = {$plugin.tx_hypestore.settings.view.product.action.index.object.category.property.images.maxWidth}
										maxHeight = {$plugin.tx_hypestore.settings.view.product.action.index.object.category.property.images.maxHeight}
									}
								}
							}

							product {
								property {
									images {
										maxWidth = {$plugin.tx_hypestore.settings.view.product.action.index.object.product.property.images.maxWidth}
										maxHeight = {$plugin.tx_hypestore.settings.view.product.action.index.object.product.property.images.maxHeight}
									}
								}
							}
						}
					}

					record {
						property {
							images {
								width = {$plugin.tx_hypestore.settings.view.product.action.record.property.images.width}
								height = {$plugin.tx_hypestore.settings.view.product.action.record.property.images.height}
								maxWidth = {$plugin.tx_hypestore.settings.view.product.action.record.property.images.maxWidth}
								maxHeight = {$plugin.tx_hypestore.settings.view.product.action.record.property.images.maxHeight}
							}
						}

						object {
							category {
								property {
									images {
										width = {$plugin.tx_hypestore.settings.view.product.action.record.object.category.property.images.width}
										height = {$plugin.tx_hypestore.settings.view.product.action.record.object.category.property.images.height}
										maxWidth = {$plugin.tx_hypestore.settings.view.product.action.record.object.category.property.images.maxWidth}
										maxHeight = {$plugin.tx_hypestore.settings.view.product.action.record.object.category.property.images.maxHeight}
									}
								}
							}

							product {
								property {
									images {
										width = {$plugin.tx_hypestore.settings.view.product.action.record.object.product.property.images.width}
										height = {$plugin.tx_hypestore.settings.view.product.action.record.object.product.property.images.height}
										maxWidth = {$plugin.tx_hypestore.settings.view.product.action.record.object.product.property.images.maxWidth}
										maxHeight = {$plugin.tx_hypestore.settings.view.product.action.record.object.product.property.images.maxHeight}
									}
								}
							}
						}
					}
				}
			}

			cart {
				pid = {$plugin.tx_hypestore.settings.view.cart.pid}
				mode = {$plugin.tx_hypestore.settings.view.cart.mode}

				common {

				}

				action {
					add {
						common {
							redirect = {$plugin.tx_hypestore.settings.view.cart.action.add.common.redirect}
						}
					}
				}
			}

			checkout {
				pid = {$plugin.tx_hypestore.settings.view.checkout.pid}

				common {

				}

				action {

				}
			}

			watchlist {
				pid = {$plugin.tx_hypestore.settings.view.watchlist.pid}

				common {

				}

				action {

				}
			}
		}
	}

	template {
		menu = HMENU
		menu {
			special = userfunction
			special {
				userFunc = user_hypestore_menu->menu
				pid = {$plugin.tx_hypestore.settings.view.category.pid}
				expAll = {$plugin.tx_hypestore.settings.common.navigation.expAll}
			}

			1 = TMENU
			1 {
				itemArrayProcFunc = user_hypestore_menu->item
			}
		}

		path = HMENU
		path {
			special = userfunction
			special {
				userFunc = user_hypestore_menu->path
				pid = {$plugin.tx_hypestore.settings.view.category.pid}
				expAll = {$plugin.tx_hypestore.settings.common.navigation.expAll}
			}

			1 = TMENU
			1 {
				itemArrayProcFunc = user_hypestore_menu->item
			}
		}
	}

	persistence {
		storagePid = {$plugin.tx_hypestore.persistence.storagePid}
	}

	view {
		templateRootPath = {$plugin.tx_hypestore.view.templateRootPath}
		layoutRootPath = {$plugin.tx_hypestore.view.layoutRootPath}
		partialRootPath = {$plugin.tx_hypestore.view.partialRootPath}
		defaultPid = {$plugin.tx_hypestore.view.defaultPid}
	}
}



# INSERT RECORDS

# Product
tt_content.shortcut.20.0.conf.tx_hypestore_domain_model_product < tt_content.list.20.hypestore_product
tt_content.shortcut.20.0.conf.tx_hypestore_domain_model_product {
	switchableControllerActions {
		Product {
			0 = record
		}
	}
}